"""""""""""""""""""""""""""""""""""""""""""""
" Vundle
"""""""""""""""""""""""""""""""""""""""""""""
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
" Plugin 'taglist.vim'
Plugin 'majutsushi/tagbar'
" Plugin 'itchyny/vim-cursorword'
Plugin 'lienze/vim-kcursorword'
Plugin 'lfv89/vim-interestingwords'    "<Leader>k/K n/N
" Plugin 'autoload_cscope.vim'
" Plugin 'fatih/vim-go'
Plugin 'SirVer/ultisnips'    " if note UltiSnips requires py >= 2.7 or py3, apt install vim-gtk
Plugin 'honza/vim-snippets'
Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'airblade/vim-gitgutter'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'jiangmiao/auto-pairs'
Plugin 'easymotion/vim-easymotion'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
" Plugin 'terryma/vim-multiple-cursors'    " deprecated use vim-visual-multi instaed
Plugin 'mg979/vim-visual-multi'
Plugin 'scrooloose/nerdcommenter'
Plugin 'luochen1990/rainbow'
" Plugin 'nathanaelkane/vim-indent-guides'
" Plugin 'Yggdroot/indentLine'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'kshenoy/vim-signature'
Plugin 'tpope/vim-fugitive'
Plugin 'octol/vim-cpp-enhanced-highlight'
Plugin 'vim-scripts/gtags.vim'
Plugin 'joereynolds/gtags-scope'
Plugin 'a.vim'      " jump to relative .h and .c
Plugin 'BufOnly.vim'    " unload all buffers but the current one
" Plugin 'ludovicchabant/vim-gutentags'

" Themes------------------------------start
" Plugin 'altercation/vim-colors-solarized'
" Plugin 'fatih/molokai'
Plugin 'morhetz/gruvbox'
" Themes--------------------------------end
call vundle#end()
filetype plugin indent on

""""""""""""""""""""""""""""""""""""""""""""
" base setting
""""""""""""""""""""""""""""""""""""""""""""
syntax on
set number		" set nu
set smartindent
set shiftwidth=8	" set sw=
set tabstop=8		" set ts=
set hlsearch

""""""""""""""""""""""""""""""""""""""""""""
" vim-kcursorword setting
""""""""""""""""""""""""""""""""""""""""""""
"let g:cursorword_highlight = 0
"autocmd Colorscheme * highlight CursorWord0 ctermbg=52 guibg=#5f0000
"autocmd Colorscheme * highlight CursorWord1 ctermbg=52 guibg=#5f0000
let g:kcursorword_kernelsource = 0
map <F4> :ToggleKCursorword<CR>

""""""""""""""""""""""""""""""""""""""""""""
" theme setting
""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256    " for vim-airline showing the right color
colorscheme gruvbox
set background=dark
" let g:molokai_original=1
" let g:rehash256=1

"""""""""""""""""""""""""""""""""""""""""""
" extra setting
""""""""""""""""""""""""""""""""""""""""""""
set nocompatible	" Use Vim defaults (much better!)
""set bs=indent,eol,start		" allow backspacing over everything in insert mode
set bs=2
"set ai			" always set autoindenting on
"set backup		" keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more
			" than 50 lines of registers
set history=50		" keep 50 lines of command line history
"set tags=tags;
"set autochdir
"set cc=81
"highlight ColorColumn ctermbg=7
autocmd FileType golang match Underlined /\%>80v.*/
autocmd FileType c match Underlined /\%>80v.*/
set cscopequickfix=s-,c-,d-,i-,t-,e-	" show the result in quickfix

""""""""""""""""""""""""""""""""""""""""""""
" key mapping
""""""""""""""""""""""""""""""""""""""""""""
nnoremap wh :bp<CR>
nnoremap wl :bn<CR>

nnoremap <C-n> <ESC>:tab split<CR><C-]>
nnoremap <C-c> <ESC>:tabc<CR>
nnoremap <C-h> <ESC><C-w>h
nnoremap <C-j> <ESC><C-w>j
nnoremap <C-k> <ESC><C-w>k
nnoremap <C-l> <ESC><C-w>l

nnoremap co :copen<CR>
nnoremap cc :cclose<CR>

nmap w= :resize +3<CR>
nmap w- :resize -3<CR>
nmap w, :vertical resize +3<CR>
nmap w. :vertical resize -3<CR>

nmap <F5> <ESC>:read !date<CR>kJ
"inoremap ( ()<ESC>i
"inoremap [ []<ESC>i
"inoremap < <><ESC>i
"inoremap { {}<ESC>i
"inoremap <CR> <c-r>=EnterButton()<CR>
"inoremap ) <c-r>=ClosePair(')')<CR>
"inoremap } <c-r>=ClosePair('}')<CR>
"inoremap ] <c-r>=ClosePair(']')<CR>
"inoremap > <c-r>=ClosePair('>')<CR>
"inoremap " <c-r>=DealSemicolon('"')<CR>
"inoremap ' <c-r>=DealSemicolon("'")<CR>
"function! ClosePair(char)
"	if getline('.')[col('.') - 1] == a:char
"		return "\<Right>"
"	else
"		return a:char
"	endif
"endfunction
"function! DealSemicolon(char)
"	if getline('.')[col('.') - 1] == a:char
"		return "\<Right>"
"	else
"		return a:char.a:char."\<Left>"
"	endif
"endfunction
"function! EnterButton()
"	let curChar = getline('.')[col('.')-1]
"	if curChar == '}'
"		return "\<CR>\<ESC>O"
"	elseif curChar == ')'
"		return "\<CR>\<ESC>O\<Tab>"
"	else
"		return "\<CR>"
"	endif
"endfunction
""""""""""""""""""""""""""""""""""""""""""""
" note: the mapping above has been insteaded
"       by jiangmiao/auto
""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""
" Tag List
""""""""""""""""""""""""""""""""""""""""""""
" map <F1> <ESC>:TlistToggle<CR>
" let Tlist_Ctags_Cmd = '/usr/bin/ctags'
" let Tlist_Show_One_File = 1
" let Tlist_Exit_OnlyWindow = 1
" let Tlist_Use_Right_Window = 0
" let Tlist_Auto_Open = 0
" let Tlist_Close_On_Select = 1

""""""""""""""""""""""""""""""""""""""""""""
" NERDTree
""""""""""""""""""""""""""""""""""""""""""""
map <F2> :NERDTreeToggle<CR>
nmap ,n :NERDTreeFind<CR>
let NERDTreeShowHidden = 1    "Show Hidden files
let NERDTreeIgnore = ['\.swp','\.swo','\.o']    "Don't Show Files
let NERDTreeQuitOnOpen = 1    "Close NERDTree when files was opened
let NERDTreeWinPos = 0    "Show on left by default
let NERDTreeShowBookmarks = 1    "Show BookMarks
let g:NERDTreeDirArrowExpandable = '+'
let g:NERDTreeDirArrowCollapsible = '-'

""""""""""""""""""""""""""""""""""""""""""""
" Tagbar
""""""""""""""""""""""""""""""""""""""""""""
map <F3> :TagbarToggle<CR>
let g:tagbar_ctags_bin = '/usr/bin/ctags'
let g:tagbar_left = 1    "show tagbar on the left
let g:tagbar_width = 30    "set width instead 40
let g:tagbar_autofocus = 1    "auto focus
let g:tagbar_sort = 0    "sort use button s to switch
let g:tagbar_autoclose = 1    " auto close
let g:tagbar_type_go = {
\ 'ctagstype' : 'go',
\ 'kinds' : [
\ 'p:package',
\ 'i:imports:1',
\ 'c:constants',
\ 'v:variables',
\ 't:types',
\ 'n:interfaces',
\ 'w:fields',
\ 'e:embedded',
\ 'm:methods',
\ 'r:constructor',
\ 'f:functions'
\ ],
\ 'sro' : '.',
\ 'kind2scope' : {
\ 't' : 'ctype',
\ 'n' : 'ntype'
\ },
\ 'scope2kind' : {
\ 'ctype' : 't',
\ 'ntype' : 'n'
\ },
\ 'ctagsbin' : 'gotags',
\ 'ctagsargs' : '-sort -silent'
\ }

"""""""""""""""""""""""""""""""""""""""""""""
" show blank space
"""""""""""""""""""""""""""""""""""""""""""""
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
set list

"""""""""""""""""""""""""""""""""""""""""""""
" cscope keymap
"""""""""""""""""""""""""""""""""""""""""""""
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>a :cs find a <C-R>=expand("<cword>")<CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""
" auto load cscope.out
"""""""""""""""""""""""""""""""""""""""""""""
if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add $PWD/cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
endif

"""""""""""""""""""""""""""""""""""""""""""""
" code setting
"""""""""""""""""""""""""""""""""""""""""""""
"if v:lang =~ "utf8$" || v:lang =~ "UTF-8$"
"   set fileencodings=ucs-bom,utf-8,latin1
"endif
set fileencodings=utf-8,gb18030    " code
set encoding=utf8

"""""""""""""""""""""""""""""""""""""""""""""
" YouCompleteMe config
"""""""""""""""""""""""""""""""""""""""""""""
set completeopt=longest,menu    " same behavior with normal IDE
autocmd InsertLeave * if pumvisible() == 0|pclose|endif    " leave insert mode and close the preview window
let g:ycm_complete_in_comments = 1    " Complete in comments
let g:ycm_complete_in_strings = 1     " Complete in strings
let g:ycm_filetype_whitelist = {
			\ "go":1,
			\ "c":1,
			\ "cpp":1,
			\ "h":1,
			\ "java":1,
			\ "sh":1,
			\ "py":1,
			\ "conf":1
			\ }

" Note: Conflict with utilsnap.
" let g:ycm_semantic_triggers =  {
			" \ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
			" \ 'cs,lua,javascript': ['re!\w{2}'],
			" \ }

let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py"
let g:ycm_show_diagnostics_ui = 0
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_collect_identifiers_from_tags_files = 1    " start engine based on tags

" modified color for golang
" autocmd FileType go highlight YcmErrorSection term=reverse ctermfg=yellow ctermbg=red gui=undercurl guisp=Red    
" highlight Search term=reverse ctermfg=1 guibg=Yellow

let g:ycm_key_list_select_completion = ['<c-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<c-p>', '<Up>']

"""""""""""""""""""""""""""""""""""""""""""""
" vim-go config
"""""""""""""""""""""""""""""""""""""""""""""
"let g:go_version_warning = 0
let g:go_fmt_command = "goimports"
let g:go_code_completion_enabled = 0
let g:go_auto_sameids = 1
let g:go_guru_scope = []

"""""""""""""""""""""""""""""""""""""""""""""
" easymotion config
"""""""""""""""""""""""""""""""""""""""""""""
let mapleader = ","

"""""""""""""""""""""""""""""""""""""""""""""
" vim-airline config
"""""""""""""""""""""""""""""""""""""""""""""
let w:airline_disable_statusline = 0
let g:airline_powerline_fonts = 1
let g:airline_theme = "gruvbox"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#buffer_nr_format = '[%s]'
let g:airline#extensions#tabline#tab_nr_type = 1
let g:airline#extensions#tabline#show_tab_count = 1

let g:airline#extensions#whitespace#enabled = 0

let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#branch#enabled = 1

" enable/disable YCM integration
let g:airline#extensions#ycm#enabled = 1
" set error count prefix
let g:airline#extensions#ycm#error_symbol = 'E:'
" set warning count prefix
let g:airline#extensions#ycm#warning_symbol = 'W:'

"let g:airline_left_sep = ''
"let g:airline_right_sep = ''

"""""""""""""""""""""""""""""""""""""""""""""
" rainbow config
"""""""""""""""""""""""""""""""""""""""""""""
let g:rainbow_active = 1

"""""""""""""""""""""""""""""""""""""""""""""
" nerdcommenter config
"""""""""""""""""""""""""""""""""""""""""""""
let g:NERDSpaceDelims = 1

"""""""""""""""""""""""""""""""""""""""""""""
" vim-indent-guides config
"""""""""""""""""""""""""""""""""""""""""""""
" let g:indent_guides_enable_on_vim_startup = 1
" let g:indent_guides_guide_size = 1
" let g:indent_guides_start_level = 2

"""""""""""""""""""""""""""""""""""""""""""""
" indentLine config
"""""""""""""""""""""""""""""""""""""""""""""
" let g:indentLine_fileType = ['go']

"""""""""""""""""""""""""""""""""""""""""""""
" ctrlp config
"""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_map = '<Leader>p'
let g:ctrlp_cmd = 'CtrlP'
nmap <Leader>f : CtrlPMRUFiles<CR>
nmap <Leader>b : CtrlPBuffer<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc|o|ko|mod|mod.c)$',
    \ }
let g:ctrlp_mruf_max = 500
"let g:ctrlp_follow_symlinks = 1
let g:ctrlp_by_filename = 1
let g:ctrlp_regexp = 0
let g:ctrlp_max_files = 0    " unlimited max files

nnoremap <Leader>fu :CtrlPFunky<CR>
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<CR>

"""""""""""""""""""""""""""""""""""""""""""""
" vim-gitgutter config
"""""""""""""""""""""""""""""""""""""""""""""
nmap ghp <Plug>(GitGutterPreviewHunk)
" let g:gitgutter_close_preview_on_escape = 1
nmap <silent> <Leader><ESC> :pclose<CR>

"""""""""""""""""""""""""""""""""""""""""""""
" UltiSnips config
"""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger = "<tab>"

"""""""""""""""""""""""""""""""""""""""""""""
" Snippets config
"""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsSnippetDirectories = ["UltiSnips", "mySnippets"]

"""""""""""""""""""""""""""""""""""""""""""""
" cpp-enhanced-highlight config
"""""""""""""""""""""""""""""""""""""""""""""
let g:cpp_class_scope_highlight = 1
let g:cpp_member_variable_hiehlight = 1
let g:cpp_class_decl_highlight = 1
let g:cpp_posix_standard = 1
let g:cpp_concepts_highlight = 1
"let g:cpp_experimental_simple_template_highlight =1

"""""""""""""""""""""""""""""""""""""""""""""
" Global config
"""""""""""""""""""""""""""""""""""""""""""""
command -nargs=+ Gt :Gtags <args>

if $GLOBAL_SWITCH=='on'
	set cscopetag
	set cscopeprg='gtags-cscope'
	let GtagsCscope_Auto_Load = 1
	let CtagsCscope_Auto_Map = 1
	let GtagsCscope_Quiet = 1
endif

"""""""""""""""""""""""""""""""""""""""""""""
" a.vim config
"""""""""""""""""""""""""""""""""""""""""""""
nnoremap <Leader>h :A<CR>
nnoremap <Leader>H :IH<CR>

"""""""""""""""""""""""""""""""""""""""""""""
" vim-gutentags config
"""""""""""""""""""""""""""""""""""""""""""""
"let g:gutentags_enabled = 1
"let g:gutentags_modules = ['gtags_cscope','cscope','ctags']
"let g:gutentags_project_root = ['.root', '.git']
" let g:gutentags_auto_add_gtags_cscope = 0
"let g:gutentags_generate_on_missing = 0
"let g:gutentags_generate_on_write = 0
"map <F4> :GutentagsUpdate<CR>

"""""""""""""""""""""""""""""""""""""""""""""
" BufOnly config
"""""""""""""""""""""""""""""""""""""""""""""
nnoremap BO :BufOnly<CR>

